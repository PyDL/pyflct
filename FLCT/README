November 28, 2017 - George H. Fisher and Brian T. Welsch, SSL, UC Berkeley

The FLCT code is being developed using a Fossil repository.  The latest
contents can be viewed here:
http://cgem.ssl.berkeley.edu/cgi-bin/cgem/FLCT/index
by clicking on the "Files" link near the top of the page.

DESCRIPTION OF THE FLCT CODE

The flct code is designed to estimate a 2-d velocity field from two
images, under the assumption that the 2nd image differs from the first one
from changes imposed by the velocity field.  The /doc folder in the distribution
contains files that describe the details of the methods underlying the 
code and how the code is run.  Specifically, the /doc folder includes the 
unix man page flct.1, and instructions for creating postscript and .pdf 
versions of the man page viewable from non-unix (eg MS Windows) systems.  
The /doc folder also includes a link to the Fisher and Welsch 2008 PASP 
paper describing the flct code as it existed in the Spring of 2007 
(version test_13).  Although the code has evolved considerably since that time, 
the basic concepts and description of method remain the same.

The distribution also includes the source code for the warp program, which
deforms an image in response to an imposed 2D flow field via the advection
equation.  The warp program can be viewed approximately as the inverse
operation of the flct program.  The doc folder also includes a man page for
the warp program.

LICENSE

The flct and warp source code is open-source, under the 
GPL version 2 license.  You are free to copy the code and use it as you like 
(in accordance with GPL v.2), 
but if you find it useful in any work you publish, we would greatly appreciate 
citations to the papers Fisher & Welsch PASP 383, 373, (2008), and 
Welsch et al (ApJ 610, 1148) (2004), and any future papers which describe 
updated versions of flct.  If you incorporate flct source code into any 
other programs, the GPL v. 2 licensing agreement provisions will apply.

VERSION

This current version of flct is 1.04, derived Nov. 28, 2017 from checkin 
[30dc874b2a] from fossil development page 
http://cgem.ssl.berkeley.edu/cgi-bin/cgem/FLCT/home.  
The main difference between this version of flct and 1.03 is the addition of 
an experimental "Plate Carree" option, both in the flct library functions, 
and in the standalone executable, allowing one to input images stored in 
Plate Carree format, where the images are distributed in an equally spaced 
longitude and latitude grid.  If this option is invoked, the images are 
remapped to a Mercator projection, flct is run, and then the velocity 
components are mapped back to Plate Carree coordinates.  Cubic convolution is 
used for the interpolation operations.

The motivation for adding the "Plate Carree" option is to support the CGEM
project, in which HMI vector magnetogram data for SHARP regions are interpolated
into Plate Carree coordinates by the HMI team.

To invoke the Plate Carree option in the standalone version of flct, use the 
command-line option -pc latmin latmax , where latmin, latmax are the 
latitude limits of the image.  The quantities latmin, latmax are assumed to
be input in radians, though from the standalone version using the 
command-line, these quantities can be specified in degrees by appending a 
"d" to the numerical values.

To use the Plate Carree option from the flct library, 
your C or Fortran program would call the function (subroutine) flct_pc 
(or flct_pc_f77), respectively.  The limits latmin, latmax (radians)
are arguments to the flct_pc function, as described in detail in 
the document libflct_usage.txt in the doc folder of this distribution.

If you use the Plate Carree option, we strongly recommend you also use
thresholding.  Without thresholding, large velocity spikes are present at 
the border between padded regions near the edges of the domain and 
magnetogram regions with data, as well as spikes in low S/N regions.  
Typically magnetic thresholds of 200G or 250G for SDO/HMI magnetogram data
work reasonably well.  Filtering can help improve results.  For SDO/HMI
magnetic field data, a filter parameter kr of 0.25  "-k 0.25" is typically
chosen.

Version 1.04 also calls the fftw3 library functions in a more flexible way,
using C preprocessor directives, depending on whether or not you choose to 
use complex variables in C by including complex.h.  Older versions of FLCT 
assumed that complex variables were not defined, and evaluated complex
arithmetic by computing real and imaginary parts of complex expressions 
explicitly.  Now, if you want or need to turn on complex arithmetic, you 
can uncomment the line 
/* # DEFINE COMPLEXH 1 */
in the file sdfsubs.h in the source directory, and the flct library, the flct
and the warp executables will be compiled with complex variable support turned 
on.  The default assumption is that complex variables are not defined.

OLDER VERSIONS:

The main difference between version 1.03 of
flct and earlier versions, is that the code is made somewhat more 
modular, with the main computational work being done by an flct function
rather than being done in the main program.  The objective
is to make this function callable by other programs written in Fortran or C
without having to do any I/O.  The flct function, as well as the other
subsidiary functions needed for flct and warp to run, are bundled into
a static library, libflct.a .  This library is compiled
when flct is built.  The details of how to compile the code are given in
the file README-install.txt in the /source directory.

The I/O operations for flct (and warp) are now done in the main programs,
the files flctmain.c and warpmain.c in the /source directory,
respectively.

The C-source code for version 1.03 of flct has also changed from version 
1.01 to fix a bug present in version 1.01 (and earlier versions).
The bug occurs in a loop that initializes the complex variables outa and 
outb, and also the loop to initialize ccorconj, both in the function 
cross_cor.  We thank Xudong Sun of Stanford University for finding the bug.

The correction of the bug does not seem to affect the results in any 
test cases done thus far, but it's prudent to update the source code anyway.  
There is also more documentation within the source code on where to change 
the necessary statements within the cross_cor function if you want to 
include the complex.h header when you compile the source code.  
The default assumption is that complex.h is not included.

In version 1.03, we omit the /bin folder of binary 
executables which we included in earlier distributions.  We feel it 
is best to compile the executable from scratch on your own system.

Also in version 1.03, the code has been changed to print a warning and exit
if the user tries to use the -h ("hires") option, which is a legacy option 
that we had retained for backwards compatibility.  However, we have found that 
the solutions computed using -h are both less accurate, and take many more 
compute cycles. Therefore the option has been disabled.

In version 1.01-1, The only significant change from 1.01 is
(1) the addition of a pre-compiled binary for solaris running on x86_64 (i86pc)
hardware; (2) the modification of the vcimage1out.pro, vcimage2out.pro, and 
vcimage3out.pro IDL procedures to allow for the output of single scalar 
values, as well as the output of 2d image arrays; and (3) the addition of the 
source code for the "warp" executable, which is a C version of the IDL 
procedure shift_frac2d.pro.  This program can perform image 
warping significantly faster than shift_frac2d.pro.  Instructions for 
compiling warp are included below in the instructions for compiling flct.  
The documentation for running warp is included in the /docs folder as a man
page, plus .ps and .pdf copies of the man page.  No pre-compiled executables 
of warp are included.

The versions (1.01 and 1.01-1) differ from 1.0 (final) in that
the temporary arrays g1tmp and g2tmp were eliminated from the calculation of
the "sliding box" arrays g1 and g1.  This resulted in a significant speedup over
version 1.0.  This version (1.01-1) supercedes all of the earlier 
versions, including all the test_* versions, and specifically including
test_13 that is described in the Fisher and Welsch paper flct_technique.pdf
in the /doc folder.

The shift_frac2d.pro function included in the IDL-io-procedures folder
uses real_pt instead of real_part so that it can be used without 
licensing issues in GDL.  

MAIN CHANGES FROM VERSION test_13 (version described in Fisher & Welsch 2008)

When sub-images are extracted from the two images used for correlation tracking,
a local mean subtraction is now done before the sub-images are muliplied by the
gaussian windowing function.  This change greatly improves the behavior with
white-light images and other images with significant non-zero biases, and
in conjunction with the low-pass filtering option, greatly improves the
behavior for very small applied shifts (shifts << 1 pixel).

For example, the Fisher and Welsch paper showed the breakdown of version 
test_13 of flct when a .01 degree rotation was applied to a magnetogram image.  
With version 1.0, an accurate reconstruction of the velocities was found for
a .0001 degree rotation, a factor of 100 smaller than the smallest (.01 degree) 
rotation considered in Fisher and Welsch.

A new option to the code was added to allow for "skipping" points in the
calculation of LCT derived velocities.  This is useful for large images when
it may not be necessary to compute an LCT velocity at every pixel.  This option
also allows for interpolation of the skipped points from the computed points
using cubic convolution interpolation.

We are grateful to Karin Muglach of NRL (now GSFC) for pointing out the 
usefulness of having a "skipping" option, and for pointing out 
the desireability of local mean subtraction.

The IDL i/o procedures and functions designed to be used in conjunction with
flct have been updated to include a few error checks.  In addition, a new
IDL function, shift_frac2d.pro, has been added, to facilitate the accurate
shifting of images by non-integer numbers of pixels.  The syntax of
shift_frac2d is essentially the same as the IDL shift function.
Shift_frac2d also includes the ability to perform non-uniform shifts (warping) 
of images.  While this functionality is handled very accurately, 
it is also slow, and may be impractical for large images.  
On the other hand, shift_frac2d is very fast for applying simple, uniform 
non-integer shifts.  An obvious application of shift_frac2d is the removal 
of secular shifts, such as those due to solar rotation between two images 
on the Sun taken at different times.

INSTALLATION

Read the README-install.txt file located in the source sub-directory.

The flct code is written in C, although it is designed to be used in
conjunction with IDL for performing the binary I/O that flct uses to read
in the images and write out the velocity fields.  The flct library, libflct.a,
includes entries for linking fortran programs to the flct function.

To compile the flct program and the flct library, you first need to make 
sure that version 3 of fftw is installed.

TESTING

The /tests folder of the flct distribution contain a link to 3 files, 
hashgauss.dat, deltaxygauss.dat, and testgaussvel.dat that you can download.  
The file hashgauss.dat
contains two input images, which we'll call f1 and f2, upon which flct 
can be run and tested.  The file deltaxygauss.dat contains two 2-D arrays 
of x and y shifts that were applied to f1 to generate f2.  The file 
testgaussvel.dat contains the output velocity field that flct generated for 
a specific set of parameters, derived from the f1 and f2 images.  
Ideally, the derived velocity field should correspond closely to the 
arrays of x and y shifts.

To ensure that your version of flct is working correctly, you can compare
its performance to the output from the files.

Make sure that all of the IDL functions and procedures in the 
IDL-io-procedures/ folder are placed in your IDL path.

Open an IDL window in the tests folder, and type
vcimage2in,f1,f2,'hashgauss.dat'

If you type help, you should see two floating point arrays, f1 and f2,
dimensioned 201,101.

Now, type 
vcimage2in,deltax,deltay,'deltaxygauss.dat'

If you type help, you should also see floating point arrays deltax, and deltay,
also dimensioned 201,101.  If you type

shade_surf,deltax,chars=2

you should see a gaussian in the center of the image.  If you type
shade_surf,deltay,chars=2

you should see a negative gaussian in the center, in the same location as
the other gaussian.

To perform a test run of flct, enter this command in your IDL window:
$flct hashgauss.dat testvels.dat 1 1 5 -k 0.5

You should see some output printed to the screen, and a dynamically
changing counter while the code is running.  It will tell you when it
is finished.

To read in the output velocity field computed by flct, type this command in
your IDL session:

vcimage3in,vxtest,vytest,vmtest,'testvels.dat'

After typing help, you should now see 3 additional arrays, vxtest,vytest,
vmtest, all dimensioned 201,101.

To compare this with the applied shifts, you can compare with
these commands:

shade_surf,vxtest,chars=2
shade_surf,deltax,chars=2

For a scatterplot of the derived velocities with the applied shifts, you
can type

plot, deltax,vxtest,ps=3
plot, deltay,vytest,ps=3

To better examine the behavior for small shifts, you can look at a log-log
plot:

plot_oo, deltax,vxtest,ps=3

If you want to compare your results with the results we achieved to make
sure that flct is functioning consistently, you can read in the precomputed flct
results as follows:

vcimage3in,vx,vy,vm,'testgaussvel.dat'

and then compare your derived velocities, vxtest and vytest, with vx and vy
as read in from testgaussvel.dat.

How were the test images f1 and f2 generated?  f1 is a field of random numbers
uniformly distributed between 0 and 1.  It was generated in IDL with the
command

f1=randomu(seed,201,101)

We have found this to be an extremely challenging test image, 
and it has posed great difficulties for earlier versions of flct, 
especially for shifts of a fraction of a pixel.  f2 is simply a non-uniformly
shifted version of f1, where the shifts are given by the deltax and deltay
arrays.  The IDL procedure shift_frac2d, located in the IDL-io-procedures 
folder, was used to generate f2 from f1 and deltax, deltay via this command:

f2=shift_frac2d(f1,deltax,deltay,/progress)

f2 can also be computed with the warp program, which runs considerably faster
than the IDL shift_frac2d procedure.
